Shader "PBR Master1"
{
    Properties
    {
        Color_C3CD9FB5("WaterColor", Color) = (0,0.1495332,0.509434,0)
Vector1_E567A086("Reflectivity", Float) = 1
Vector1_33B63372("WaveSpeed", Float) = 0.5
Vector1_252B0398("WaveScale", Float) = 3
Vector1_6AB2287B("EdgeIntensity", Float) = 0.01
Vector1_71A8A08B("EdgeDistance", Float) = 50
[NoScaleOffset] Texture2D_C43C6030("WaterNormal", 2D) = "white" {}
Vector1_AD5C0AB6("NormalSpeed", Range(0, 0.5)) = 0.1
Vector1_5D9D0320("NormalStrength", Range(0, 0.5)) = 0.1

    }
    SubShader
    {
        Tags
        {
            "RenderPipeline"="LightweightPipeline"
            "RenderType"="Opaque"
            "Queue"="Transparent+0"
        }
        Pass
        {
        	Tags{"LightMode" = "LightweightForward"}

        	// Material options generated by graph

            Blend SrcAlpha OneMinusSrcAlpha, One OneMinusSrcAlpha

            Cull Back

            ZTest LEqual

            ZWrite On

        	HLSLPROGRAM
            // Required to compile gles 2.0 with standard srp library
            #pragma prefer_hlslcc gles
            #pragma exclude_renderers d3d11_9x
            #pragma target 2.0

        	// -------------------------------------
            // Lightweight Pipeline keywords
            #pragma multi_compile _ _MAIN_LIGHT_SHADOWS
            #pragma multi_compile _ _MAIN_LIGHT_SHADOWS_CASCADE
            #pragma multi_compile _ _ADDITIONAL_LIGHTS_VERTEX _ADDITIONAL_LIGHTS
            #pragma multi_compile _ _ADDITIONAL_LIGHT_SHADOWS
            #pragma multi_compile _ _SHADOWS_SOFT
            #pragma multi_compile _ _MIXED_LIGHTING_SUBTRACTIVE
            
        	// -------------------------------------
            // Unity defined keywords
            #pragma multi_compile _ DIRLIGHTMAP_COMBINED
            #pragma multi_compile _ LIGHTMAP_ON
            #pragma multi_compile_fog

            //--------------------------------------
            // GPU Instancing
            #pragma multi_compile_instancing

            #pragma vertex vert
        	#pragma fragment frag

        	// Defines generated by graph
            #define _NORMALMAP 1
            #define REQUIRE_DEPTH_TEXTURE

        	

            CBUFFER_START(UnityPerMaterial)
            float4 Color_C3CD9FB5;
            float Vector1_E567A086;
            float Vector1_33B63372;
            float Vector1_252B0398;
            float Vector1_6AB2287B;
            float Vector1_71A8A08B;
            float Vector1_AD5C0AB6;
            float Vector1_5D9D0320;
            CBUFFER_END

            TEXTURE2D(Texture2D_C43C6030); SAMPLER(samplerTexture2D_C43C6030); float4 Texture2D_C43C6030_TexelSize;

            struct VertexDescriptionInputs
            {
                float3 WorldSpaceNormal;
                float3 ObjectSpacePosition;
                half4 uv2;
            };

            struct SurfaceDescriptionInputs
            {
                float4 ScreenPosition;
                half4 uv2;
            };


            void Unity_Multiply_float (float A, float B, out float Out)
            {
                Out = A * B;
            }

            void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
            {
                Out = UV * Tiling + Offset;
            }


        float2 unity_gradientNoise_dir(float2 p)
        {
            // Permutation and hashing used in webgl-nosie goo.gl/pX7HtC
            p = p % 289;
            float x = (34 * p.x + 1) * p.x % 289 + p.y;
            x = (34 * x + 1) * x % 289;
            x = frac(x / 41) * 2 - 1;
            return normalize(float2(x - floor(x + 0.5), abs(x) - 0.5));
        }


        float unity_gradientNoise(float2 p)
        {
            float2 ip = floor(p);
            float2 fp = frac(p);
            float d00 = dot(unity_gradientNoise_dir(ip), fp);
            float d01 = dot(unity_gradientNoise_dir(ip + float2(0, 1)), fp - float2(0, 1));
            float d10 = dot(unity_gradientNoise_dir(ip + float2(1, 0)), fp - float2(1, 0));
            float d11 = dot(unity_gradientNoise_dir(ip + float2(1, 1)), fp - float2(1, 1));
            fp = fp * fp * fp * (fp * (fp * 6 - 15) + 10);
            return lerp(lerp(d00, d01, fp.y), lerp(d10, d11, fp.y), fp.x);
        }

            void Unity_GradientNoise_float(float2 UV, float Scale, out float Out)
            { Out = unity_gradientNoise(UV * Scale) + 0.5; }

            void Unity_Blend_Multiply_float(float Base, float Blend, out float Out, float Opacity)
            {
                Out = Base * Blend;
                Out = lerp(Base, Out, Opacity);
            }

            void Unity_Multiply_float (float3 A, float3 B, out float3 Out)
            {
                Out = A * B;
            }

            void Unity_Add_float3(float3 A, float3 B, out float3 Out)
            {
                Out = A + B;
            }

            void Unity_SceneDepth_Linear01_float(float4 UV, out float Out)
            {
                Out = Linear01Depth(SHADERGRAPH_SAMPLE_SCENE_DEPTH(UV.xy), _ZBufferParams);
            }

            void Unity_Subtract_float(float A, float B, out float Out)
            {
                Out = A - B;
            }

            void Unity_Smoothstep_float(float Edge1, float Edge2, float In, out float Out)
            {
                Out = smoothstep(Edge1, Edge2, In);
            }

            void Unity_ReplaceColor_float(float3 In, float3 From, float3 To, float Range, out float3 Out, float Fuzziness)
            {
                float Distance = distance(From, In);
                Out = lerp(To, In, saturate((Distance - Range) / max(Fuzziness, 1e-5f)));
            }

            void Unity_NormalFromTexture_float(Texture2D Texture, SamplerState Sampler, float2 UV, float Offset, float Strength, out float3 Out)
            {
                Offset = pow(Offset, 3) * 0.1;
                float2 offsetU = float2(UV.x + Offset, UV.y);
                float2 offsetV = float2(UV.x, UV.y + Offset);
                float normalSample = Texture.Sample(Sampler, UV);
                float uSample = Texture.Sample(Sampler, offsetU);
                float vSample = Texture.Sample(Sampler, offsetV);
                float3 va = float3(1, 0, (uSample - normalSample) * Strength);
                float3 vb = float3(0, 1, (vSample - normalSample) * Strength);
                Out = normalize(cross(va, vb));
            }

            struct VertexDescription
            {
                float3 Position;
            };

            VertexDescription PopulateVertexData(VertexDescriptionInputs IN)
            {
                VertexDescription description = (VertexDescription)0;
                float _Property_5062A5B0_Out_0 = Vector1_33B63372;
                float _Multiply_8B6F13FF_Out_2;
                Unity_Multiply_float(_Time.y, _Property_5062A5B0_Out_0, _Multiply_8B6F13FF_Out_2);

                float2 _TilingAndOffset_C1E9B602_Out_3;
                Unity_TilingAndOffset_float(IN.uv2.xy, float2 (25,25), (_Multiply_8B6F13FF_Out_2.xx), _TilingAndOffset_C1E9B602_Out_3);
                float _Property_1713DFB6_Out_0 = Vector1_252B0398;
                float _GradientNoise_7C6CFF22_Out_2;
                Unity_GradientNoise_float(_TilingAndOffset_C1E9B602_Out_3, _Property_1713DFB6_Out_0, _GradientNoise_7C6CFF22_Out_2);
                float4 Color_99323635 = IsGammaSpace() ? float4(0.4056604, 0.4056604, 0.4056604, 0) : float4(SRGBToLinear(float3(0.4056604, 0.4056604, 0.4056604)), 0);
                float _Blend_A4A279B6_Out_2;
                Unity_Blend_Multiply_float(_GradientNoise_7C6CFF22_Out_2, 0, _Blend_A4A279B6_Out_2, (Color_99323635).x);
                float3 _Multiply_324A9939_Out_2;
                Unity_Multiply_float(IN.WorldSpaceNormal, (_Blend_A4A279B6_Out_2.xxx), _Multiply_324A9939_Out_2);

                float3 _Add_84DFD690_Out_2;
                Unity_Add_float3(_Multiply_324A9939_Out_2, IN.ObjectSpacePosition, _Add_84DFD690_Out_2);
                description.Position = _Add_84DFD690_Out_2;
                return description;
            }

            struct SurfaceDescription
            {
                float3 Albedo;
                float3 Normal;
                float3 Emission;
                float Metallic;
                float Smoothness;
                float Occlusion;
                float Alpha;
                float AlphaClipThreshold;
            };

            SurfaceDescription PopulateSurfaceData(SurfaceDescriptionInputs IN)
            {
                SurfaceDescription surface = (SurfaceDescription)0;
                float _SceneDepth_6BB07D67_Out_1;
                Unity_SceneDepth_Linear01_float(float4(IN.ScreenPosition.xy / IN.ScreenPosition.w, 0, 0), _SceneDepth_6BB07D67_Out_1);
                float _Multiply_6845176C_Out_2;
                Unity_Multiply_float(_SceneDepth_6BB07D67_Out_1, _ProjectionParams.z, _Multiply_6845176C_Out_2);

                float4 _ScreenPosition_519F54ED_Out_0 = IN.ScreenPosition;
                float _Split_3AA6CCFB_R_1 = _ScreenPosition_519F54ED_Out_0[0];
                float _Split_3AA6CCFB_G_2 = _ScreenPosition_519F54ED_Out_0[1];
                float _Split_3AA6CCFB_B_3 = _ScreenPosition_519F54ED_Out_0[2];
                float _Split_3AA6CCFB_A_4 = _ScreenPosition_519F54ED_Out_0[3];
                float _Property_C79C277_Out_0 = Vector1_71A8A08B;
                float _Subtract_76E3D08C_Out_2;
                Unity_Subtract_float(_Split_3AA6CCFB_A_4, _Property_C79C277_Out_0, _Subtract_76E3D08C_Out_2);
                float _Subtract_EA669432_Out_2;
                Unity_Subtract_float(_Multiply_6845176C_Out_2, _Subtract_76E3D08C_Out_2, _Subtract_EA669432_Out_2);
                float _Property_67A63B5B_Out_0 = Vector1_6AB2287B;
                float _Multiply_CED15153_Out_2;
                Unity_Multiply_float(_Subtract_EA669432_Out_2, _Property_67A63B5B_Out_0, _Multiply_CED15153_Out_2);

                float _Smoothstep_DED61EA3_Out_3;
                Unity_Smoothstep_float(0, 1, _Multiply_CED15153_Out_2, _Smoothstep_DED61EA3_Out_3);
                float4 _Property_205D714F_Out_0 = Color_C3CD9FB5;
                float3 _ReplaceColor_90B5A94_Out_4;
                Unity_ReplaceColor_float((_Smoothstep_DED61EA3_Out_3.xxx), IsGammaSpace() ? float3(1, 1, 1) : SRGBToLinear(float3(1, 1, 1)), (_Property_205D714F_Out_0.xyz), 1, _ReplaceColor_90B5A94_Out_4, 1);
                float _Property_51818F4_Out_0 = Vector1_AD5C0AB6;
                float _Multiply_AD103AE5_Out_2;
                Unity_Multiply_float(_Time.y, _Property_51818F4_Out_0, _Multiply_AD103AE5_Out_2);

                float2 _TilingAndOffset_F92DB613_Out_3;
                Unity_TilingAndOffset_float(IN.uv2.xy, float2 (10,10), (_Multiply_AD103AE5_Out_2.xx), _TilingAndOffset_F92DB613_Out_3);
                float _Property_42561E5F_Out_0 = Vector1_5D9D0320;
                float3 _NormalFromTexture_83B8D1B6_Out_5;
                Unity_NormalFromTexture_float(Texture2D_C43C6030, samplerTexture2D_C43C6030, _TilingAndOffset_F92DB613_Out_3, 1, _Property_42561E5F_Out_0, _NormalFromTexture_83B8D1B6_Out_5);

                float _Property_888F2FB1_Out_0 = Vector1_E567A086;
                surface.Albedo = _ReplaceColor_90B5A94_Out_4;
                surface.Normal = _NormalFromTexture_83B8D1B6_Out_5;
                surface.Emission = IsGammaSpace() ? float3(0, 0, 0) : SRGBToLinear(float3(0, 0, 0));
                surface.Metallic = 0.3;
                surface.Smoothness = _Property_888F2FB1_Out_0;
                surface.Occlusion = 1;
                surface.Alpha = _Smoothstep_DED61EA3_Out_3;
                surface.AlphaClipThreshold = 0.5;
                return surface;
            }

            struct GraphVertexInput
            {
                float4 vertex : POSITION;
                float3 normal : NORMAL;
                float4 tangent : TANGENT;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord1 : TEXCOORD1;
                UNITY_VERTEX_INPUT_INSTANCE_ID
            };


        	struct GraphVertexOutput
            {
                float4 clipPos                : SV_POSITION;
                DECLARE_LIGHTMAP_OR_SH(lightmapUV, vertexSH, 0);
        		half4 fogFactorAndVertexLight : TEXCOORD1; // x: fogFactor, yzw: vertex light
            	float4 shadowCoord            : TEXCOORD2;

        		// Interpolators defined by graph
                float3 WorldSpacePosition : TEXCOORD3;
                float3 WorldSpaceNormal : TEXCOORD4;
                float3 WorldSpaceTangent : TEXCOORD5;
                float3 WorldSpaceBiTangent : TEXCOORD6;
                float3 WorldSpaceViewDirection : TEXCOORD7;
                float4 ScreenPosition : TEXCOORD8;
                half4 uv2 : TEXCOORD9;
                half4 uv1 : TEXCOORD10;

                UNITY_VERTEX_INPUT_INSTANCE_ID
            	UNITY_VERTEX_OUTPUT_STEREO
            };

            GraphVertexOutput vert (GraphVertexInput v)
        	{
        		GraphVertexOutput o = (GraphVertexOutput)0;
                UNITY_SETUP_INSTANCE_ID(v);
            	UNITY_TRANSFER_INSTANCE_ID(v, o);
        		UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

        		// Vertex transformations performed by graph
                float3 WorldSpacePosition = mul(UNITY_MATRIX_M,v.vertex).xyz;
                float3 WorldSpaceNormal = normalize(mul(v.normal,(float3x3)UNITY_MATRIX_I_M));
                float3 WorldSpaceTangent = normalize(mul((float3x3)UNITY_MATRIX_M,v.tangent.xyz));
                float3 WorldSpaceBiTangent = cross(WorldSpaceNormal, WorldSpaceTangent.xyz) * v.tangent.w;
                float3 WorldSpaceViewDirection = _WorldSpaceCameraPos.xyz - mul(GetObjectToWorldMatrix(), float4(v.vertex.xyz, 1.0)).xyz;
                float4 ScreenPosition = ComputeScreenPos(mul(GetWorldToHClipMatrix(), mul(GetObjectToWorldMatrix(), v.vertex)), _ProjectionParams.x);
                float4 uv2 = v.texcoord2;
                float4 uv1 = v.texcoord1;
                float3 ObjectSpacePosition = mul(UNITY_MATRIX_I_M,float4(WorldSpacePosition,1.0)).xyz;

        		VertexDescriptionInputs vdi = (VertexDescriptionInputs)0;

        		// Vertex description inputs defined by graph
                vdi.WorldSpaceNormal = WorldSpaceNormal;
                vdi.ObjectSpacePosition = ObjectSpacePosition;
                vdi.uv2 = uv2;

        	    VertexDescription vd = PopulateVertexData(vdi);
        		v.vertex.xyz = vd.Position;

                ScreenPosition = ComputeScreenPos(mul(GetWorldToHClipMatrix(), mul(GetObjectToWorldMatrix(), v.vertex)), _ProjectionParams.x);

        		// Vertex shader outputs defined by graph
                o.WorldSpacePosition = WorldSpacePosition;
                o.WorldSpaceNormal = WorldSpaceNormal;
                o.WorldSpaceTangent = WorldSpaceTangent;
                o.WorldSpaceBiTangent = WorldSpaceBiTangent;
                o.WorldSpaceViewDirection = WorldSpaceViewDirection;
                o.ScreenPosition = ScreenPosition;
                o.uv2 = uv2;
                o.uv1 = uv1;

        		float3 lwWNormal = TransformObjectToWorldNormal(v.normal);

                VertexPositionInputs vertexInput = GetVertexPositionInputs(v.vertex.xyz);
                
         		// We either sample GI from lightmap or SH.
        	    // Lightmap UV and vertex SH coefficients use the same interpolator ("float2 lightmapUV" for lightmap or "half3 vertexSH" for SH)
                // see DECLARE_LIGHTMAP_OR_SH macro.
        	    // The following funcions initialize the correct variable with correct data
        	    OUTPUT_LIGHTMAP_UV(v.texcoord1, unity_LightmapST, o.lightmapUV);
        	    OUTPUT_SH(lwWNormal, o.vertexSH);

        	    half3 vertexLight = VertexLighting(vertexInput.positionWS, lwWNormal);
        	    half fogFactor = ComputeFogFactor(vertexInput.positionCS.z);
        	    o.fogFactorAndVertexLight = half4(fogFactor, vertexLight);
        	    o.clipPos = vertexInput.positionCS;

        	#ifdef _MAIN_LIGHT_SHADOWS
        		o.shadowCoord = GetShadowCoord(vertexInput);
        	#endif
        		return o;
        	}

        	half4 frag (GraphVertexOutput IN ) : SV_Target
            {
            	UNITY_SETUP_INSTANCE_ID(IN);
        		UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);

        		// Pixel transformations performed by graph
                float3 WorldSpacePosition = IN.WorldSpacePosition;
                float3 WorldSpaceNormal = IN.WorldSpaceNormal;
                float3 WorldSpaceTangent = IN.WorldSpaceTangent;
                float3 WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
                float3 WorldSpaceViewDirection = IN.WorldSpaceViewDirection;
                float4 ScreenPosition = IN.ScreenPosition;
                float4 uv2 = IN.uv2;
                float4 uv1 = IN.uv1;

                SurfaceDescriptionInputs surfaceInput = (SurfaceDescriptionInputs)0;

        		// Surface description inputs defined by graph
                surfaceInput.ScreenPosition = ScreenPosition;
                surfaceInput.uv2 = uv2;

                SurfaceDescription surf = PopulateSurfaceData(surfaceInput);

        		float3 Albedo = float3(0.5, 0.5, 0.5);
        		float3 Specular = float3(0, 0, 0);
        		float Metallic = 1;
        		float3 Normal = float3(0, 0, 1);
        		float3 Emission = 0;
        		float Smoothness = 0.5;
        		float Occlusion = 1;
        		float Alpha = 1;
        		float AlphaClipThreshold = 0;

        		// Surface description remap performed by graph
                Albedo = surf.Albedo;
                Normal = surf.Normal;
                Emission = surf.Emission;
                Metallic = surf.Metallic;
                Smoothness = surf.Smoothness;
                Occlusion = surf.Occlusion;
                Alpha = surf.Alpha;
                AlphaClipThreshold = surf.AlphaClipThreshold;

        		InputData inputData;
        		inputData.positionWS = WorldSpacePosition;

        #ifdef _NORMALMAP
        	    inputData.normalWS = normalize(TransformTangentToWorld(Normal, half3x3(WorldSpaceTangent, WorldSpaceBiTangent, WorldSpaceNormal)));
        #else
            #if !SHADER_HINT_NICE_QUALITY
                inputData.normalWS = WorldSpaceNormal;
            #else
        	    inputData.normalWS = normalize(WorldSpaceNormal);
            #endif
        #endif

        #if !SHADER_HINT_NICE_QUALITY
        	    // viewDirection should be normalized here, but we avoid doing it as it's close enough and we save some ALU.
        	    inputData.viewDirectionWS = WorldSpaceViewDirection;
        #else
        	    inputData.viewDirectionWS = normalize(WorldSpaceViewDirection);
        #endif

        	    inputData.shadowCoord = IN.shadowCoord;

        	    inputData.fogCoord = IN.fogFactorAndVertexLight.x;
        	    inputData.vertexLighting = IN.fogFactorAndVertexLight.yzw;
        	    inputData.bakedGI = SAMPLE_GI(IN.lightmapUV, IN.vertexSH, inputData.normalWS);

        		half4 color = LightweightFragmentPBR(
        			inputData, 
        			Albedo, 
        			Metallic, 
        			Specular, 
        			Smoothness, 
        			Occlusion, 
        			Emission, 
        			Alpha);

        		// Computes fog factor per-vertex
            	color.rgb = MixFog(color.rgb, IN.fogFactorAndVertexLight.x);

        #if _AlphaClip
        		clip(Alpha - AlphaClipThreshold);
        #endif
        		return color;
            }

        	ENDHLSL
        }
        Pass
        {
        	Name "ShadowCaster"
            Tags{"LightMode" = "ShadowCaster"}

            ZWrite On ZTest LEqual

            // Material options generated by graph
            Cull Back

            HLSLPROGRAM
            // Required to compile gles 2.0 with standard srp library
            #pragma prefer_hlslcc gles
            #pragma exclude_renderers d3d11_9x
            #pragma target 2.0

            //--------------------------------------
            // GPU Instancing
            #pragma multi_compile_instancing

            #pragma vertex ShadowPassVertex
            #pragma fragment ShadowPassFragment

            // Defines generated by graph
            #define _NORMALMAP 1
            #define REQUIRE_DEPTH_TEXTURE

            #include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/Core.hlsl"
            #include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/Lighting.hlsl"
            #include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/ShaderGraphFunctions.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"

            CBUFFER_START(UnityPerMaterial)
            float4 Color_C3CD9FB5;
            float Vector1_E567A086;
            float Vector1_33B63372;
            float Vector1_252B0398;
            float Vector1_6AB2287B;
            float Vector1_71A8A08B;
            float Vector1_AD5C0AB6;
            float Vector1_5D9D0320;
            CBUFFER_END

            TEXTURE2D(Texture2D_C43C6030); SAMPLER(samplerTexture2D_C43C6030); float4 Texture2D_C43C6030_TexelSize;

            struct VertexDescriptionInputs
            {
                float3 WorldSpaceNormal;
                float3 ObjectSpacePosition;
                half4 uv2;
            };

            struct SurfaceDescriptionInputs
            {
                float4 ScreenPosition;
            };


            void Unity_Multiply_float (float A, float B, out float Out)
            {
                Out = A * B;
            }

            void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
            {
                Out = UV * Tiling + Offset;
            }


        float2 unity_gradientNoise_dir(float2 p)
        {
            // Permutation and hashing used in webgl-nosie goo.gl/pX7HtC
            p = p % 289;
            float x = (34 * p.x + 1) * p.x % 289 + p.y;
            x = (34 * x + 1) * x % 289;
            x = frac(x / 41) * 2 - 1;
            return normalize(float2(x - floor(x + 0.5), abs(x) - 0.5));
        }


        float unity_gradientNoise(float2 p)
        {
            float2 ip = floor(p);
            float2 fp = frac(p);
            float d00 = dot(unity_gradientNoise_dir(ip), fp);
            float d01 = dot(unity_gradientNoise_dir(ip + float2(0, 1)), fp - float2(0, 1));
            float d10 = dot(unity_gradientNoise_dir(ip + float2(1, 0)), fp - float2(1, 0));
            float d11 = dot(unity_gradientNoise_dir(ip + float2(1, 1)), fp - float2(1, 1));
            fp = fp * fp * fp * (fp * (fp * 6 - 15) + 10);
            return lerp(lerp(d00, d01, fp.y), lerp(d10, d11, fp.y), fp.x);
        }

            void Unity_GradientNoise_float(float2 UV, float Scale, out float Out)
            { Out = unity_gradientNoise(UV * Scale) + 0.5; }

            void Unity_Blend_Multiply_float(float Base, float Blend, out float Out, float Opacity)
            {
                Out = Base * Blend;
                Out = lerp(Base, Out, Opacity);
            }

            void Unity_Multiply_float (float3 A, float3 B, out float3 Out)
            {
                Out = A * B;
            }

            void Unity_Add_float3(float3 A, float3 B, out float3 Out)
            {
                Out = A + B;
            }

            void Unity_SceneDepth_Linear01_float(float4 UV, out float Out)
            {
                Out = Linear01Depth(SHADERGRAPH_SAMPLE_SCENE_DEPTH(UV.xy), _ZBufferParams);
            }

            void Unity_Subtract_float(float A, float B, out float Out)
            {
                Out = A - B;
            }

            void Unity_Smoothstep_float(float Edge1, float Edge2, float In, out float Out)
            {
                Out = smoothstep(Edge1, Edge2, In);
            }

            void Unity_ReplaceColor_float(float3 In, float3 From, float3 To, float Range, out float3 Out, float Fuzziness)
            {
                float Distance = distance(From, In);
                Out = lerp(To, In, saturate((Distance - Range) / max(Fuzziness, 1e-5f)));
            }

            struct VertexDescription
            {
                float3 Position;
            };

            VertexDescription PopulateVertexData(VertexDescriptionInputs IN)
            {
                VertexDescription description = (VertexDescription)0;
                float _Property_5062A5B0_Out_0 = Vector1_33B63372;
                float _Multiply_8B6F13FF_Out_2;
                Unity_Multiply_float(_Time.y, _Property_5062A5B0_Out_0, _Multiply_8B6F13FF_Out_2);

                float2 _TilingAndOffset_C1E9B602_Out_3;
                Unity_TilingAndOffset_float(IN.uv2.xy, float2 (25,25), (_Multiply_8B6F13FF_Out_2.xx), _TilingAndOffset_C1E9B602_Out_3);
                float _Property_1713DFB6_Out_0 = Vector1_252B0398;
                float _GradientNoise_7C6CFF22_Out_2;
                Unity_GradientNoise_float(_TilingAndOffset_C1E9B602_Out_3, _Property_1713DFB6_Out_0, _GradientNoise_7C6CFF22_Out_2);
                float4 Color_99323635 = IsGammaSpace() ? float4(0.4056604, 0.4056604, 0.4056604, 0) : float4(SRGBToLinear(float3(0.4056604, 0.4056604, 0.4056604)), 0);
                float _Blend_A4A279B6_Out_2;
                Unity_Blend_Multiply_float(_GradientNoise_7C6CFF22_Out_2, 0, _Blend_A4A279B6_Out_2, (Color_99323635).x);
                float3 _Multiply_324A9939_Out_2;
                Unity_Multiply_float(IN.WorldSpaceNormal, (_Blend_A4A279B6_Out_2.xxx), _Multiply_324A9939_Out_2);

                float3 _Add_84DFD690_Out_2;
                Unity_Add_float3(_Multiply_324A9939_Out_2, IN.ObjectSpacePosition, _Add_84DFD690_Out_2);
                description.Position = _Add_84DFD690_Out_2;
                return description;
            }

            struct SurfaceDescription
            {
                float3 Albedo;
                float3 Emission;
                float Alpha;
                float AlphaClipThreshold;
            };

            SurfaceDescription PopulateSurfaceData(SurfaceDescriptionInputs IN)
            {
                SurfaceDescription surface = (SurfaceDescription)0;
                float _SceneDepth_6BB07D67_Out_1;
                Unity_SceneDepth_Linear01_float(float4(IN.ScreenPosition.xy / IN.ScreenPosition.w, 0, 0), _SceneDepth_6BB07D67_Out_1);
                float _Multiply_6845176C_Out_2;
                Unity_Multiply_float(_SceneDepth_6BB07D67_Out_1, _ProjectionParams.z, _Multiply_6845176C_Out_2);

                float4 _ScreenPosition_519F54ED_Out_0 = IN.ScreenPosition;
                float _Split_3AA6CCFB_R_1 = _ScreenPosition_519F54ED_Out_0[0];
                float _Split_3AA6CCFB_G_2 = _ScreenPosition_519F54ED_Out_0[1];
                float _Split_3AA6CCFB_B_3 = _ScreenPosition_519F54ED_Out_0[2];
                float _Split_3AA6CCFB_A_4 = _ScreenPosition_519F54ED_Out_0[3];
                float _Property_C79C277_Out_0 = Vector1_71A8A08B;
                float _Subtract_76E3D08C_Out_2;
                Unity_Subtract_float(_Split_3AA6CCFB_A_4, _Property_C79C277_Out_0, _Subtract_76E3D08C_Out_2);
                float _Subtract_EA669432_Out_2;
                Unity_Subtract_float(_Multiply_6845176C_Out_2, _Subtract_76E3D08C_Out_2, _Subtract_EA669432_Out_2);
                float _Property_67A63B5B_Out_0 = Vector1_6AB2287B;
                float _Multiply_CED15153_Out_2;
                Unity_Multiply_float(_Subtract_EA669432_Out_2, _Property_67A63B5B_Out_0, _Multiply_CED15153_Out_2);

                float _Smoothstep_DED61EA3_Out_3;
                Unity_Smoothstep_float(0, 1, _Multiply_CED15153_Out_2, _Smoothstep_DED61EA3_Out_3);
                float4 _Property_205D714F_Out_0 = Color_C3CD9FB5;
                float3 _ReplaceColor_90B5A94_Out_4;
                Unity_ReplaceColor_float((_Smoothstep_DED61EA3_Out_3.xxx), IsGammaSpace() ? float3(1, 1, 1) : SRGBToLinear(float3(1, 1, 1)), (_Property_205D714F_Out_0.xyz), 1, _ReplaceColor_90B5A94_Out_4, 1);
                surface.Albedo = _ReplaceColor_90B5A94_Out_4;
                surface.Emission = IsGammaSpace() ? float3(0, 0, 0) : SRGBToLinear(float3(0, 0, 0));
                surface.Alpha = _Smoothstep_DED61EA3_Out_3;
                surface.AlphaClipThreshold = 0.5;
                return surface;
            }

            struct GraphVertexInput
            {
                float4 vertex : POSITION;
                float3 normal : NORMAL;
                float4 tangent : TANGENT;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord1 : TEXCOORD1;
                UNITY_VERTEX_INPUT_INSTANCE_ID
            };


        	struct VertexOutput
        	{
        	    float2 uv           : TEXCOORD0;
        	    float4 clipPos      : SV_POSITION;
                // Interpolators defined by graph
                float3 WorldSpacePosition : TEXCOORD3;
                float3 WorldSpaceNormal : TEXCOORD4;
                float3 WorldSpaceTangent : TEXCOORD5;
                float3 WorldSpaceBiTangent : TEXCOORD6;
                float3 WorldSpaceViewDirection : TEXCOORD7;
                float4 ScreenPosition : TEXCOORD8;
                half4 uv1 : TEXCOORD9;

                UNITY_VERTEX_INPUT_INSTANCE_ID
        	};

            float3 _LightDirection;

            VertexOutput ShadowPassVertex(GraphVertexInput v)
        	{
        	    VertexOutput o;
        	    UNITY_SETUP_INSTANCE_ID(v);
                UNITY_TRANSFER_INSTANCE_ID(v, o);

                // Vertex transformations performed by graph
                float3 WorldSpacePosition = mul(UNITY_MATRIX_M,v.vertex).xyz;
                float3 WorldSpaceNormal = normalize(mul(v.normal,(float3x3)UNITY_MATRIX_I_M));
                float3 WorldSpaceTangent = normalize(mul((float3x3)UNITY_MATRIX_M,v.tangent.xyz));
                float3 WorldSpaceBiTangent = cross(WorldSpaceNormal, WorldSpaceTangent.xyz) * v.tangent.w;
                float3 WorldSpaceViewDirection = _WorldSpaceCameraPos.xyz - mul(GetObjectToWorldMatrix(), float4(v.vertex.xyz, 1.0)).xyz;
                float4 ScreenPosition = ComputeScreenPos(mul(GetWorldToHClipMatrix(), mul(GetObjectToWorldMatrix(), v.vertex)), _ProjectionParams.x);
                float4 uv2 = v.texcoord2;
                float4 uv1 = v.texcoord1;
                float3 ObjectSpacePosition = mul(UNITY_MATRIX_I_M,float4(WorldSpacePosition,1.0)).xyz;

        		VertexDescriptionInputs vdi = (VertexDescriptionInputs)0;

                // Vertex description inputs defined by graph
                vdi.WorldSpaceNormal = WorldSpaceNormal;
                vdi.ObjectSpacePosition = ObjectSpacePosition;
                vdi.uv2 = uv2;

        	    VertexDescription vd = PopulateVertexData(vdi);
                v.vertex.xyz = vd.Position;

                ScreenPosition = ComputeScreenPos(mul(GetWorldToHClipMatrix(), mul(GetObjectToWorldMatrix(), v.vertex)), _ProjectionParams.x);

        	    // Vertex shader outputs defined by graph
                o.WorldSpacePosition = WorldSpacePosition;
                o.WorldSpaceNormal = WorldSpaceNormal;
                o.WorldSpaceTangent = WorldSpaceTangent;
                o.WorldSpaceBiTangent = WorldSpaceBiTangent;
                o.WorldSpaceViewDirection = WorldSpaceViewDirection;
                o.ScreenPosition = ScreenPosition;
                o.uv1 = uv1;

        	    
        	    float3 positionWS = TransformObjectToWorld(v.vertex.xyz);
                float3 normalWS = TransformObjectToWorldNormal(v.normal);

                float4 clipPos = TransformWorldToHClip(ApplyShadowBias(positionWS, normalWS, _LightDirection));

        	#if UNITY_REVERSED_Z
        	    clipPos.z = min(clipPos.z, clipPos.w * UNITY_NEAR_CLIP_VALUE);
        	#else
        	    clipPos.z = max(clipPos.z, clipPos.w * UNITY_NEAR_CLIP_VALUE);
        	#endif
                o.clipPos = clipPos;

        	    return o;
        	}

            half4 ShadowPassFragment(VertexOutput IN ) : SV_TARGET
            {
                UNITY_SETUP_INSTANCE_ID(IN);

                // Pixel transformations performed by graph
                float3 WorldSpacePosition = IN.WorldSpacePosition;
                float3 WorldSpaceNormal = IN.WorldSpaceNormal;
                float3 WorldSpaceTangent = IN.WorldSpaceTangent;
                float3 WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
                float3 WorldSpaceViewDirection = IN.WorldSpaceViewDirection;
                float4 ScreenPosition = IN.ScreenPosition;
                float4 uv1 = IN.uv1;

                SurfaceDescriptionInputs surfaceInput = (SurfaceDescriptionInputs)0;

        		// Surface description inputs defined by graph
                surfaceInput.ScreenPosition = ScreenPosition;

                SurfaceDescription surf = PopulateSurfaceData(surfaceInput);

                float3 Albedo = float3(0.5, 0.5, 0.5);
        		float3 Emission = 0;
        		float Alpha = 1;
        		float AlphaClipThreshold = 0;

        		// Surface description remap performed by graph
                Albedo = surf.Albedo;
                Emission = surf.Emission;
                Alpha = surf.Alpha;
                AlphaClipThreshold = surf.AlphaClipThreshold;

         #if _AlphaClip
        		clip(Alpha - AlphaClipThreshold);
        #endif
                return 0;
            }

            ENDHLSL
        }

        Pass
        {
        	Name "DepthOnly"
            Tags{"LightMode" = "DepthOnly"}

            ZWrite On
            ColorMask 0

            // Material options generated by graph
            Cull Back

            HLSLPROGRAM
            // Required to compile gles 2.0 with standard srp library
            #pragma prefer_hlslcc gles
            #pragma exclude_renderers d3d11_9x
            #pragma target 2.0

            //--------------------------------------
            // GPU Instancing
            #pragma multi_compile_instancing

            #pragma vertex vert
            #pragma fragment frag

            // Defines generated by graph
            #define _NORMALMAP 1
            #define REQUIRE_DEPTH_TEXTURE

            #include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/Core.hlsl"
            #include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/Lighting.hlsl"
            #include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/ShaderGraphFunctions.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"

            CBUFFER_START(UnityPerMaterial)
            float4 Color_C3CD9FB5;
            float Vector1_E567A086;
            float Vector1_33B63372;
            float Vector1_252B0398;
            float Vector1_6AB2287B;
            float Vector1_71A8A08B;
            float Vector1_AD5C0AB6;
            float Vector1_5D9D0320;
            CBUFFER_END

            TEXTURE2D(Texture2D_C43C6030); SAMPLER(samplerTexture2D_C43C6030); float4 Texture2D_C43C6030_TexelSize;

            struct VertexDescriptionInputs
            {
                float3 WorldSpaceNormal;
                float3 ObjectSpacePosition;
                half4 uv2;
            };

            struct SurfaceDescriptionInputs
            {
                float4 ScreenPosition;
            };


            void Unity_Multiply_float (float A, float B, out float Out)
            {
                Out = A * B;
            }

            void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
            {
                Out = UV * Tiling + Offset;
            }


        float2 unity_gradientNoise_dir(float2 p)
        {
            // Permutation and hashing used in webgl-nosie goo.gl/pX7HtC
            p = p % 289;
            float x = (34 * p.x + 1) * p.x % 289 + p.y;
            x = (34 * x + 1) * x % 289;
            x = frac(x / 41) * 2 - 1;
            return normalize(float2(x - floor(x + 0.5), abs(x) - 0.5));
        }


        float unity_gradientNoise(float2 p)
        {
            float2 ip = floor(p);
            float2 fp = frac(p);
            float d00 = dot(unity_gradientNoise_dir(ip), fp);
            float d01 = dot(unity_gradientNoise_dir(ip + float2(0, 1)), fp - float2(0, 1));
            float d10 = dot(unity_gradientNoise_dir(ip + float2(1, 0)), fp - float2(1, 0));
            float d11 = dot(unity_gradientNoise_dir(ip + float2(1, 1)), fp - float2(1, 1));
            fp = fp * fp * fp * (fp * (fp * 6 - 15) + 10);
            return lerp(lerp(d00, d01, fp.y), lerp(d10, d11, fp.y), fp.x);
        }

            void Unity_GradientNoise_float(float2 UV, float Scale, out float Out)
            { Out = unity_gradientNoise(UV * Scale) + 0.5; }

            void Unity_Blend_Multiply_float(float Base, float Blend, out float Out, float Opacity)
            {
                Out = Base * Blend;
                Out = lerp(Base, Out, Opacity);
            }

            void Unity_Multiply_float (float3 A, float3 B, out float3 Out)
            {
                Out = A * B;
            }

            void Unity_Add_float3(float3 A, float3 B, out float3 Out)
            {
                Out = A + B;
            }

            void Unity_SceneDepth_Linear01_float(float4 UV, out float Out)
            {
                Out = Linear01Depth(SHADERGRAPH_SAMPLE_SCENE_DEPTH(UV.xy), _ZBufferParams);
            }

            void Unity_Subtract_float(float A, float B, out float Out)
            {
                Out = A - B;
            }

            void Unity_Smoothstep_float(float Edge1, float Edge2, float In, out float Out)
            {
                Out = smoothstep(Edge1, Edge2, In);
            }

            void Unity_ReplaceColor_float(float3 In, float3 From, float3 To, float Range, out float3 Out, float Fuzziness)
            {
                float Distance = distance(From, In);
                Out = lerp(To, In, saturate((Distance - Range) / max(Fuzziness, 1e-5f)));
            }

            struct VertexDescription
            {
                float3 Position;
            };

            VertexDescription PopulateVertexData(VertexDescriptionInputs IN)
            {
                VertexDescription description = (VertexDescription)0;
                float _Property_5062A5B0_Out_0 = Vector1_33B63372;
                float _Multiply_8B6F13FF_Out_2;
                Unity_Multiply_float(_Time.y, _Property_5062A5B0_Out_0, _Multiply_8B6F13FF_Out_2);

                float2 _TilingAndOffset_C1E9B602_Out_3;
                Unity_TilingAndOffset_float(IN.uv2.xy, float2 (25,25), (_Multiply_8B6F13FF_Out_2.xx), _TilingAndOffset_C1E9B602_Out_3);
                float _Property_1713DFB6_Out_0 = Vector1_252B0398;
                float _GradientNoise_7C6CFF22_Out_2;
                Unity_GradientNoise_float(_TilingAndOffset_C1E9B602_Out_3, _Property_1713DFB6_Out_0, _GradientNoise_7C6CFF22_Out_2);
                float4 Color_99323635 = IsGammaSpace() ? float4(0.4056604, 0.4056604, 0.4056604, 0) : float4(SRGBToLinear(float3(0.4056604, 0.4056604, 0.4056604)), 0);
                float _Blend_A4A279B6_Out_2;
                Unity_Blend_Multiply_float(_GradientNoise_7C6CFF22_Out_2, 0, _Blend_A4A279B6_Out_2, (Color_99323635).x);
                float3 _Multiply_324A9939_Out_2;
                Unity_Multiply_float(IN.WorldSpaceNormal, (_Blend_A4A279B6_Out_2.xxx), _Multiply_324A9939_Out_2);

                float3 _Add_84DFD690_Out_2;
                Unity_Add_float3(_Multiply_324A9939_Out_2, IN.ObjectSpacePosition, _Add_84DFD690_Out_2);
                description.Position = _Add_84DFD690_Out_2;
                return description;
            }

            struct SurfaceDescription
            {
                float3 Albedo;
                float3 Emission;
                float Alpha;
                float AlphaClipThreshold;
            };

            SurfaceDescription PopulateSurfaceData(SurfaceDescriptionInputs IN)
            {
                SurfaceDescription surface = (SurfaceDescription)0;
                float _SceneDepth_6BB07D67_Out_1;
                Unity_SceneDepth_Linear01_float(float4(IN.ScreenPosition.xy / IN.ScreenPosition.w, 0, 0), _SceneDepth_6BB07D67_Out_1);
                float _Multiply_6845176C_Out_2;
                Unity_Multiply_float(_SceneDepth_6BB07D67_Out_1, _ProjectionParams.z, _Multiply_6845176C_Out_2);

                float4 _ScreenPosition_519F54ED_Out_0 = IN.ScreenPosition;
                float _Split_3AA6CCFB_R_1 = _ScreenPosition_519F54ED_Out_0[0];
                float _Split_3AA6CCFB_G_2 = _ScreenPosition_519F54ED_Out_0[1];
                float _Split_3AA6CCFB_B_3 = _ScreenPosition_519F54ED_Out_0[2];
                float _Split_3AA6CCFB_A_4 = _ScreenPosition_519F54ED_Out_0[3];
                float _Property_C79C277_Out_0 = Vector1_71A8A08B;
                float _Subtract_76E3D08C_Out_2;
                Unity_Subtract_float(_Split_3AA6CCFB_A_4, _Property_C79C277_Out_0, _Subtract_76E3D08C_Out_2);
                float _Subtract_EA669432_Out_2;
                Unity_Subtract_float(_Multiply_6845176C_Out_2, _Subtract_76E3D08C_Out_2, _Subtract_EA669432_Out_2);
                float _Property_67A63B5B_Out_0 = Vector1_6AB2287B;
                float _Multiply_CED15153_Out_2;
                Unity_Multiply_float(_Subtract_EA669432_Out_2, _Property_67A63B5B_Out_0, _Multiply_CED15153_Out_2);

                float _Smoothstep_DED61EA3_Out_3;
                Unity_Smoothstep_float(0, 1, _Multiply_CED15153_Out_2, _Smoothstep_DED61EA3_Out_3);
                float4 _Property_205D714F_Out_0 = Color_C3CD9FB5;
                float3 _ReplaceColor_90B5A94_Out_4;
                Unity_ReplaceColor_float((_Smoothstep_DED61EA3_Out_3.xxx), IsGammaSpace() ? float3(1, 1, 1) : SRGBToLinear(float3(1, 1, 1)), (_Property_205D714F_Out_0.xyz), 1, _ReplaceColor_90B5A94_Out_4, 1);
                surface.Albedo = _ReplaceColor_90B5A94_Out_4;
                surface.Emission = IsGammaSpace() ? float3(0, 0, 0) : SRGBToLinear(float3(0, 0, 0));
                surface.Alpha = _Smoothstep_DED61EA3_Out_3;
                surface.AlphaClipThreshold = 0.5;
                return surface;
            }

            struct GraphVertexInput
            {
                float4 vertex : POSITION;
                float3 normal : NORMAL;
                float4 tangent : TANGENT;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord1 : TEXCOORD1;
                UNITY_VERTEX_INPUT_INSTANCE_ID
            };


        	struct VertexOutput
        	{
        	    float2 uv           : TEXCOORD0;
        	    float4 clipPos      : SV_POSITION;
                // Interpolators defined by graph
                float3 WorldSpacePosition : TEXCOORD3;
                float3 WorldSpaceNormal : TEXCOORD4;
                float3 WorldSpaceTangent : TEXCOORD5;
                float3 WorldSpaceBiTangent : TEXCOORD6;
                float3 WorldSpaceViewDirection : TEXCOORD7;
                float4 ScreenPosition : TEXCOORD8;
                half4 uv1 : TEXCOORD9;

                UNITY_VERTEX_INPUT_INSTANCE_ID
                UNITY_VERTEX_OUTPUT_STEREO
        	};

            VertexOutput vert(GraphVertexInput v)
            {
                VertexOutput o = (VertexOutput)0;
        	    UNITY_SETUP_INSTANCE_ID(v);
                UNITY_TRANSFER_INSTANCE_ID(v, o);
                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

        	    // Vertex transformations performed by graph
                float3 WorldSpacePosition = mul(UNITY_MATRIX_M,v.vertex).xyz;
                float3 WorldSpaceNormal = normalize(mul(v.normal,(float3x3)UNITY_MATRIX_I_M));
                float3 WorldSpaceTangent = normalize(mul((float3x3)UNITY_MATRIX_M,v.tangent.xyz));
                float3 WorldSpaceBiTangent = cross(WorldSpaceNormal, WorldSpaceTangent.xyz) * v.tangent.w;
                float3 WorldSpaceViewDirection = _WorldSpaceCameraPos.xyz - mul(GetObjectToWorldMatrix(), float4(v.vertex.xyz, 1.0)).xyz;
                float4 ScreenPosition = ComputeScreenPos(mul(GetWorldToHClipMatrix(), mul(GetObjectToWorldMatrix(), v.vertex)), _ProjectionParams.x);
                float4 uv2 = v.texcoord2;
                float4 uv1 = v.texcoord1;
                float3 ObjectSpacePosition = mul(UNITY_MATRIX_I_M,float4(WorldSpacePosition,1.0)).xyz;

        		VertexDescriptionInputs vdi = (VertexDescriptionInputs)0;

                // Vertex description inputs defined by graph
                vdi.WorldSpaceNormal = WorldSpaceNormal;
                vdi.ObjectSpacePosition = ObjectSpacePosition;
                vdi.uv2 = uv2;

        	    VertexDescription vd = PopulateVertexData(vdi);
                v.vertex.xyz = vd.Position;

                ScreenPosition = ComputeScreenPos(mul(GetWorldToHClipMatrix(), mul(GetObjectToWorldMatrix(), v.vertex)), _ProjectionParams.x);

        	    // Vertex shader outputs defined by graph
                o.WorldSpacePosition = WorldSpacePosition;
                o.WorldSpaceNormal = WorldSpaceNormal;
                o.WorldSpaceTangent = WorldSpaceTangent;
                o.WorldSpaceBiTangent = WorldSpaceBiTangent;
                o.WorldSpaceViewDirection = WorldSpaceViewDirection;
                o.ScreenPosition = ScreenPosition;
                o.uv1 = uv1;

        	    o.clipPos = TransformObjectToHClip(v.vertex.xyz);
        	    return o;
            }

            half4 frag(VertexOutput IN ) : SV_TARGET
            {
                UNITY_SETUP_INSTANCE_ID(IN);
        		UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);

                // Pixel transformations performed by graph
                float3 WorldSpacePosition = IN.WorldSpacePosition;
                float3 WorldSpaceNormal = IN.WorldSpaceNormal;
                float3 WorldSpaceTangent = IN.WorldSpaceTangent;
                float3 WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
                float3 WorldSpaceViewDirection = IN.WorldSpaceViewDirection;
                float4 ScreenPosition = IN.ScreenPosition;
                float4 uv1 = IN.uv1;

                SurfaceDescriptionInputs surfaceInput = (SurfaceDescriptionInputs)0;

        		// Surface description inputs defined by graph
                surfaceInput.ScreenPosition = ScreenPosition;

                SurfaceDescription surf = PopulateSurfaceData(surfaceInput);

                float3 Albedo = float3(0.5, 0.5, 0.5);
        		float3 Emission = 0;
        		float Alpha = 1;
        		float AlphaClipThreshold = 0;

        		// Surface description remap performed by graph
                Albedo = surf.Albedo;
                Emission = surf.Emission;
                Alpha = surf.Alpha;
                AlphaClipThreshold = surf.AlphaClipThreshold;

         #if _AlphaClip
        		clip(Alpha - AlphaClipThreshold);
        #endif
                return 0;
            }
            ENDHLSL
        }

        // This pass it not used during regular rendering, only for lightmap baking.
        Pass
        {
        	Name "Meta"
            Tags{"LightMode" = "Meta"}

            Cull Off

            HLSLPROGRAM
            // Required to compile gles 2.0 with standard srp library
            #pragma prefer_hlslcc gles
            #pragma exclude_renderers d3d11_9x
            #pragma target 2.0

            #pragma vertex vert
            #pragma fragment frag

            float4 _MainTex_ST;

            // Defines generated by graph
            #define _NORMALMAP 1
            #define REQUIRE_DEPTH_TEXTURE

            #include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/Core.hlsl"
            #include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/MetaInput.hlsl"
            #include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/ShaderGraphFunctions.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"

            #pragma shader_feature _ _SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A

                CBUFFER_START(UnityPerMaterial)
            float4 Color_C3CD9FB5;
            float Vector1_E567A086;
            float Vector1_33B63372;
            float Vector1_252B0398;
            float Vector1_6AB2287B;
            float Vector1_71A8A08B;
            float Vector1_AD5C0AB6;
            float Vector1_5D9D0320;
            CBUFFER_END

            TEXTURE2D(Texture2D_C43C6030); SAMPLER(samplerTexture2D_C43C6030); float4 Texture2D_C43C6030_TexelSize;

            struct VertexDescriptionInputs
            {
                float3 WorldSpaceNormal;
                float3 ObjectSpacePosition;
                half4 uv2;
            };

            struct SurfaceDescriptionInputs
            {
                float4 ScreenPosition;
            };


            void Unity_Multiply_float (float A, float B, out float Out)
            {
                Out = A * B;
            }

            void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
            {
                Out = UV * Tiling + Offset;
            }


        float2 unity_gradientNoise_dir(float2 p)
        {
            // Permutation and hashing used in webgl-nosie goo.gl/pX7HtC
            p = p % 289;
            float x = (34 * p.x + 1) * p.x % 289 + p.y;
            x = (34 * x + 1) * x % 289;
            x = frac(x / 41) * 2 - 1;
            return normalize(float2(x - floor(x + 0.5), abs(x) - 0.5));
        }


        float unity_gradientNoise(float2 p)
        {
            float2 ip = floor(p);
            float2 fp = frac(p);
            float d00 = dot(unity_gradientNoise_dir(ip), fp);
            float d01 = dot(unity_gradientNoise_dir(ip + float2(0, 1)), fp - float2(0, 1));
            float d10 = dot(unity_gradientNoise_dir(ip + float2(1, 0)), fp - float2(1, 0));
            float d11 = dot(unity_gradientNoise_dir(ip + float2(1, 1)), fp - float2(1, 1));
            fp = fp * fp * fp * (fp * (fp * 6 - 15) + 10);
            return lerp(lerp(d00, d01, fp.y), lerp(d10, d11, fp.y), fp.x);
        }

            void Unity_GradientNoise_float(float2 UV, float Scale, out float Out)
            { Out = unity_gradientNoise(UV * Scale) + 0.5; }

            void Unity_Blend_Multiply_float(float Base, float Blend, out float Out, float Opacity)
            {
                Out = Base * Blend;
                Out = lerp(Base, Out, Opacity);
            }

            void Unity_Multiply_float (float3 A, float3 B, out float3 Out)
            {
                Out = A * B;
            }

            void Unity_Add_float3(float3 A, float3 B, out float3 Out)
            {
                Out = A + B;
            }

            void Unity_SceneDepth_Linear01_float(float4 UV, out float Out)
            {
                Out = Linear01Depth(SHADERGRAPH_SAMPLE_SCENE_DEPTH(UV.xy), _ZBufferParams);
            }

            void Unity_Subtract_float(float A, float B, out float Out)
            {
                Out = A - B;
            }

            void Unity_Smoothstep_float(float Edge1, float Edge2, float In, out float Out)
            {
                Out = smoothstep(Edge1, Edge2, In);
            }

            void Unity_ReplaceColor_float(float3 In, float3 From, float3 To, float Range, out float3 Out, float Fuzziness)
            {
                float Distance = distance(From, In);
                Out = lerp(To, In, saturate((Distance - Range) / max(Fuzziness, 1e-5f)));
            }

            struct VertexDescription
            {
                float3 Position;
            };

            VertexDescription PopulateVertexData(VertexDescriptionInputs IN)
            {
                VertexDescription description = (VertexDescription)0;
                float _Property_5062A5B0_Out_0 = Vector1_33B63372;
                float _Multiply_8B6F13FF_Out_2;
                Unity_Multiply_float(_Time.y, _Property_5062A5B0_Out_0, _Multiply_8B6F13FF_Out_2);

                float2 _TilingAndOffset_C1E9B602_Out_3;
                Unity_TilingAndOffset_float(IN.uv2.xy, float2 (25,25), (_Multiply_8B6F13FF_Out_2.xx), _TilingAndOffset_C1E9B602_Out_3);
                float _Property_1713DFB6_Out_0 = Vector1_252B0398;
                float _GradientNoise_7C6CFF22_Out_2;
                Unity_GradientNoise_float(_TilingAndOffset_C1E9B602_Out_3, _Property_1713DFB6_Out_0, _GradientNoise_7C6CFF22_Out_2);
                float4 Color_99323635 = IsGammaSpace() ? float4(0.4056604, 0.4056604, 0.4056604, 0) : float4(SRGBToLinear(float3(0.4056604, 0.4056604, 0.4056604)), 0);
                float _Blend_A4A279B6_Out_2;
                Unity_Blend_Multiply_float(_GradientNoise_7C6CFF22_Out_2, 0, _Blend_A4A279B6_Out_2, (Color_99323635).x);
                float3 _Multiply_324A9939_Out_2;
                Unity_Multiply_float(IN.WorldSpaceNormal, (_Blend_A4A279B6_Out_2.xxx), _Multiply_324A9939_Out_2);

                float3 _Add_84DFD690_Out_2;
                Unity_Add_float3(_Multiply_324A9939_Out_2, IN.ObjectSpacePosition, _Add_84DFD690_Out_2);
                description.Position = _Add_84DFD690_Out_2;
                return description;
            }

            struct SurfaceDescription
            {
                float3 Albedo;
                float3 Emission;
                float Alpha;
                float AlphaClipThreshold;
            };

            SurfaceDescription PopulateSurfaceData(SurfaceDescriptionInputs IN)
            {
                SurfaceDescription surface = (SurfaceDescription)0;
                float _SceneDepth_6BB07D67_Out_1;
                Unity_SceneDepth_Linear01_float(float4(IN.ScreenPosition.xy / IN.ScreenPosition.w, 0, 0), _SceneDepth_6BB07D67_Out_1);
                float _Multiply_6845176C_Out_2;
                Unity_Multiply_float(_SceneDepth_6BB07D67_Out_1, _ProjectionParams.z, _Multiply_6845176C_Out_2);

                float4 _ScreenPosition_519F54ED_Out_0 = IN.ScreenPosition;
                float _Split_3AA6CCFB_R_1 = _ScreenPosition_519F54ED_Out_0[0];
                float _Split_3AA6CCFB_G_2 = _ScreenPosition_519F54ED_Out_0[1];
                float _Split_3AA6CCFB_B_3 = _ScreenPosition_519F54ED_Out_0[2];
                float _Split_3AA6CCFB_A_4 = _ScreenPosition_519F54ED_Out_0[3];
                float _Property_C79C277_Out_0 = Vector1_71A8A08B;
                float _Subtract_76E3D08C_Out_2;
                Unity_Subtract_float(_Split_3AA6CCFB_A_4, _Property_C79C277_Out_0, _Subtract_76E3D08C_Out_2);
                float _Subtract_EA669432_Out_2;
                Unity_Subtract_float(_Multiply_6845176C_Out_2, _Subtract_76E3D08C_Out_2, _Subtract_EA669432_Out_2);
                float _Property_67A63B5B_Out_0 = Vector1_6AB2287B;
                float _Multiply_CED15153_Out_2;
                Unity_Multiply_float(_Subtract_EA669432_Out_2, _Property_67A63B5B_Out_0, _Multiply_CED15153_Out_2);

                float _Smoothstep_DED61EA3_Out_3;
                Unity_Smoothstep_float(0, 1, _Multiply_CED15153_Out_2, _Smoothstep_DED61EA3_Out_3);
                float4 _Property_205D714F_Out_0 = Color_C3CD9FB5;
                float3 _ReplaceColor_90B5A94_Out_4;
                Unity_ReplaceColor_float((_Smoothstep_DED61EA3_Out_3.xxx), IsGammaSpace() ? float3(1, 1, 1) : SRGBToLinear(float3(1, 1, 1)), (_Property_205D714F_Out_0.xyz), 1, _ReplaceColor_90B5A94_Out_4, 1);
                surface.Albedo = _ReplaceColor_90B5A94_Out_4;
                surface.Emission = IsGammaSpace() ? float3(0, 0, 0) : SRGBToLinear(float3(0, 0, 0));
                surface.Alpha = _Smoothstep_DED61EA3_Out_3;
                surface.AlphaClipThreshold = 0.5;
                return surface;
            }

            struct GraphVertexInput
            {
                float4 vertex : POSITION;
                float3 normal : NORMAL;
                float4 tangent : TANGENT;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord1 : TEXCOORD1;
                UNITY_VERTEX_INPUT_INSTANCE_ID
            };


        	struct VertexOutput
        	{
        	    float2 uv           : TEXCOORD0;
        	    float4 clipPos      : SV_POSITION;
                // Interpolators defined by graph
                float3 WorldSpacePosition : TEXCOORD3;
                float3 WorldSpaceNormal : TEXCOORD4;
                float3 WorldSpaceTangent : TEXCOORD5;
                float3 WorldSpaceBiTangent : TEXCOORD6;
                float3 WorldSpaceViewDirection : TEXCOORD7;
                float4 ScreenPosition : TEXCOORD8;
                half4 uv1 : TEXCOORD9;

                UNITY_VERTEX_INPUT_INSTANCE_ID
                UNITY_VERTEX_OUTPUT_STEREO
        	};

            VertexOutput vert(GraphVertexInput v)
            {
                VertexOutput o = (VertexOutput)0;
        	    UNITY_SETUP_INSTANCE_ID(v);
                UNITY_TRANSFER_INSTANCE_ID(v, o);
                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

        	    // Vertex transformations performed by graph
                float3 WorldSpacePosition = mul(UNITY_MATRIX_M,v.vertex).xyz;
                float3 WorldSpaceNormal = normalize(mul(v.normal,(float3x3)UNITY_MATRIX_I_M));
                float3 WorldSpaceTangent = normalize(mul((float3x3)UNITY_MATRIX_M,v.tangent.xyz));
                float3 WorldSpaceBiTangent = cross(WorldSpaceNormal, WorldSpaceTangent.xyz) * v.tangent.w;
                float3 WorldSpaceViewDirection = _WorldSpaceCameraPos.xyz - mul(GetObjectToWorldMatrix(), float4(v.vertex.xyz, 1.0)).xyz;
                float4 ScreenPosition = ComputeScreenPos(mul(GetWorldToHClipMatrix(), mul(GetObjectToWorldMatrix(), v.vertex)), _ProjectionParams.x);
                float4 uv2 = v.texcoord2;
                float4 uv1 = v.texcoord1;
                float3 ObjectSpacePosition = mul(UNITY_MATRIX_I_M,float4(WorldSpacePosition,1.0)).xyz;


        	    // Vertex shader outputs defined by graph
                o.WorldSpacePosition = WorldSpacePosition;
                o.WorldSpaceNormal = WorldSpaceNormal;
                o.WorldSpaceTangent = WorldSpaceTangent;
                o.WorldSpaceBiTangent = WorldSpaceBiTangent;
                o.WorldSpaceViewDirection = WorldSpaceViewDirection;
                o.ScreenPosition = ScreenPosition;
                o.uv1 = uv1;

                o.clipPos = MetaVertexPosition(v.vertex, uv1, uv1, unity_LightmapST, unity_DynamicLightmapST);
        	    return o;
            }

            half4 frag(VertexOutput IN ) : SV_TARGET
            {
                UNITY_SETUP_INSTANCE_ID(IN);
        		UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);

                // Pixel transformations performed by graph
                float3 WorldSpacePosition = IN.WorldSpacePosition;
                float3 WorldSpaceNormal = IN.WorldSpaceNormal;
                float3 WorldSpaceTangent = IN.WorldSpaceTangent;
                float3 WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
                float3 WorldSpaceViewDirection = IN.WorldSpaceViewDirection;
                float4 ScreenPosition = IN.ScreenPosition;
                float4 uv1 = IN.uv1;

                SurfaceDescriptionInputs surfaceInput = (SurfaceDescriptionInputs)0;

        		// Surface description inputs defined by graph
                surfaceInput.ScreenPosition = ScreenPosition;

                SurfaceDescription surf = PopulateSurfaceData(surfaceInput);

        		float3 Albedo = float3(0.5, 0.5, 0.5);
        		float3 Emission = 0;
        		float Alpha = 1;
        		float AlphaClipThreshold = 0;

        		// Surface description remap performed by graph
                Albedo = surf.Albedo;
                Emission = surf.Emission;
                Alpha = surf.Alpha;
                AlphaClipThreshold = surf.AlphaClipThreshold;

         #if _AlphaClip
        		clip(Alpha - AlphaClipThreshold);
        #endif

                MetaInput metaInput = (MetaInput)0;
                metaInput.Albedo = Albedo;
                metaInput.Emission = Emission;
                
                return MetaFragment(metaInput);
            }
            ENDHLSL
        }
    }
    CustomEditor "UnityEditor.ShaderGraph.PBRMasterGUI"
    FallBack "Hidden/InternalErrorShader"
}
